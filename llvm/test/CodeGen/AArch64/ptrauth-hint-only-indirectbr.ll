; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5

; RUN: llc -mtriple aarch64-elf -mattr=+pauth                     \
; RUN:                                                           \
; RUN:   -aarch64-min-jump-table-entries=1 -aarch64-enable-atomic-cfg-tidy=0 \
; RUN:   -o - %s | FileCheck %s --check-prefix=ELF

; RUN: llc -mtriple aarch64-elf -mattr=+pauth                     \
; RUN:   -fast-isel                                              \
; RUN:   -aarch64-min-jump-table-entries=1 -aarch64-enable-atomic-cfg-tidy=0 \
; RUN:   -o - %s | FileCheck %s --check-prefix=ELF

; RUN-NOT: llc -mtriple aarch64-elf -mattr=+pauth                     \
; RUN-NOT:   -global-isel -global-isel-abort=1 -verify-machineinstrs \
; RUN-NOT:   -aarch64-min-jump-table-entries=1 -aarch64-enable-atomic-cfg-tidy=0 \
; RUN-NOT:   -o - %s | FileCheck %s --check-prefix=ELF

; RUN: llc -mtriple aarch64 -mattr=+pauth -mattr=+pauth-hint-only \
; RUN:                                                           \
; RUN:   -aarch64-min-jump-table-entries=1 -aarch64-enable-atomic-cfg-tidy=0 \
; RUN:   -o - %s | FileCheck %s --check-prefix=HINT

; RUN: llc -mtriple aarch64 -mattr=+pauth -mattr=+pauth-hint-only \
; RUN:   -fast-isel                                              \
; RUN:   -aarch64-min-jump-table-entries=1 -aarch64-enable-atomic-cfg-tidy=0 \
; RUN:   -o - %s | FileCheck %s --check-prefix=HINT

; RUN-NOT: llc -mtriple aarch64 -mattr=+pauth -mattr=+pauth-hint-only \
; RUN-NOT:   -global-isel -global-isel-abort=1 -verify-machineinstrs \
; RUN-NOT:   -aarch64-min-jump-table-entries=1 -aarch64-enable-atomic-cfg-tidy=0 \
; RUN-NOT:   -o - %s | FileCheck %s --check-prefix=HINT

;; The discriminator is the same for all blockaddresses in the function.
;; ptrauth_string_discriminator("test_indirectbr blockaddress") == 34947

define i32 @test_indirectbr() #0 {
; ELF-LABEL: test_indirectbr:
; ELF:       // %bb.0: // %entry
; ELF-NEXT:    str x30, [sp, #-16]! // 8-byte Folded Spill
; ELF-NEXT:    adrp x17, .Ltmp0
; ELF-NEXT:    add x17, x17, :lo12:.Ltmp0
; ELF-NEXT:    mov x16, #34947 // =0x8883
; ELF-NEXT:    pacia x17, x16
; ELF-NEXT:    mov x0, x17
; ELF-NEXT:    adrp x17, .Ltmp1
; ELF-NEXT:    add x17, x17, :lo12:.Ltmp1
; ELF-NEXT:    mov x16, #34947 // =0x8883
; ELF-NEXT:    pacia x17, x16
; ELF-NEXT:    mov x1, x17
; ELF-NEXT:    bl dummy_choose
; ELF-NEXT:    mov x17, #34947 // =0x8883
; ELF-NEXT:    braa x0, x17
; ELF-NEXT:  .Ltmp0: // Block address taken
; ELF-NEXT:  .LBB0_1: // %bb1
; ELF-NEXT:    mov w0, #1 // =0x1
; ELF-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; ELF-NEXT:    ret
; ELF-NEXT:  .Ltmp1: // Block address taken
; ELF-NEXT:  .LBB0_2: // %bb2
; ELF-NEXT:    mov w0, #2 // =0x2
; ELF-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; ELF-NEXT:    ret
;
; HINT-LABEL: test_indirectbr:
; HINT:       // %bb.0: // %entry
; HINT-NEXT:    str x30, [sp, #-16]! // 8-byte Folded Spill
; HINT-NEXT:    adrp x17, .Ltmp0
; HINT-NEXT:    add x17, x17, :lo12:.Ltmp0
; HINT-NEXT:    mov x16, #34947 // =0x8883
; HINT-NEXT:    pacia1716
; HINT-NEXT:    mov x0, x17
; HINT-NEXT:    adrp x17, .Ltmp1
; HINT-NEXT:    add x17, x17, :lo12:.Ltmp1
; HINT-NEXT:    mov x16, #34947 // =0x8883
; HINT-NEXT:    pacia1716
; HINT-NEXT:    mov x1, x17
; HINT-NEXT:    bl dummy_choose
; HINT-NEXT:    mov x17, x0 
; HINT-NEXT:    mov x16, #34947 // =0x8883
; HINT-NEXT:    autia1716
; HINT-NEXT:    br x17
; HINT-NEXT:  .Ltmp0: // Block address taken
; HINT-NEXT:  .LBB0_1: // %bb1
; HINT-NEXT:    mov w0, #1 // =0x1
; HINT-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; HINT-NEXT:    ret
; HINT-NEXT:  .Ltmp1: // Block address taken
; HINT-NEXT:  .LBB0_2: // %bb2
; HINT-NEXT:    mov w0, #2 // =0x2
; HINT-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; HINT-NEXT:    ret
entry:
  %tmp0 = call ptr @dummy_choose(ptr blockaddress(@test_indirectbr, %bb1), ptr blockaddress(@test_indirectbr, %bb2))
  indirectbr ptr %tmp0, [label %bb1, label %bb2]

bb1:
  ret i32 1

bb2:
  ret i32 2
}

define ptr @test_indirectbr_other_function() #0 {
; ELF-LABEL: test_indirectbr_other_function:
; ELF:       // %bb.0:
; ELF-NEXT:    adrp x17, .Ltmp0
; ELF-NEXT:    add x17, x17, :lo12:.Ltmp0
; ELF-NEXT:    mov x16, #34947 // =0x8883
; ELF-NEXT:    pacia x17, x16
; ELF-NEXT:    mov x0, x17
; ELF-NEXT:    ret
;
; HINT-LABEL: test_indirectbr_other_function:
; HINT:       // %bb.0:
; HINT-NEXT:    adrp x17, .Ltmp0
; HINT-NEXT:    add x17, x17, :lo12:.Ltmp0
; HINT-NEXT:    mov x16, #34947 // =0x8883
; HINT-NEXT:    pacia1716
; HINT-NEXT:    mov x0, x17
; HINT-NEXT:    ret
  ret ptr blockaddress(@test_indirectbr, %bb1)
}

;; Test another function to compare the discriminator.
;; ptrauth_string_discriminator("test_indirectbr_2 blockaddress") == 40224

define i32 @test_indirectbr_2() #0 {
; ELF-LABEL: test_indirectbr_2:
; ELF:       // %bb.0: // %entry
; ELF-NEXT:    str x30, [sp, #-16]! // 8-byte Folded Spill
; ELF-NEXT:    adrp x17, .Ltmp2
; ELF-NEXT:    add x17, x17, :lo12:.Ltmp2
; ELF-NEXT:    mov x16, #40224 // =0x9d20
; ELF-NEXT:    pacia x17, x16
; ELF-NEXT:    mov x0, x17
; ELF-NEXT:    adrp x17, .Ltmp3
; ELF-NEXT:    add x17, x17, :lo12:.Ltmp3
; ELF-NEXT:    mov x16, #40224 // =0x9d20
; ELF-NEXT:    pacia x17, x16
; ELF-NEXT:    mov x1, x17
; ELF-NEXT:    bl dummy_choose
; ELF-NEXT:    mov x17, #40224 // =0x9d20
; ELF-NEXT:    braa x0, x17
; ELF-NEXT:  .Ltmp2: // Block address taken
; ELF-NEXT:  .LBB2_1: // %bb1
; ELF-NEXT:    mov w0, #1 // =0x1
; ELF-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; ELF-NEXT:    ret
; ELF-NEXT:  .Ltmp3: // Block address taken
; ELF-NEXT:  .LBB2_2: // %bb2
; ELF-NEXT:    mov w0, #2 // =0x2
; ELF-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; ELF-NEXT:    ret
;
; HINT-LABEL: test_indirectbr_2:
; HINT:       // %bb.0: // %entry
; HINT-NEXT:    str x30, [sp, #-16]! // 8-byte Folded Spill
; HINT-NEXT:    adrp x17, .Ltmp2
; HINT-NEXT:    add x17, x17, :lo12:.Ltmp2
; HINT-NEXT:    mov x16, #40224 // =0x9d20
; HINT-NEXT:    pacia1716
; HINT-NEXT:    mov x0, x17
; HINT-NEXT:    adrp x17, .Ltmp3
; HINT-NEXT:    add x17, x17, :lo12:.Ltmp3
; HINT-NEXT:    mov x16, #40224 // =0x9d20
; HINT-NEXT:    pacia1716
; HINT-NEXT:    mov x1, x17
; HINT-NEXT:    bl dummy_choose
; HINT-NEXT:    mov x17, x0
; HINT-NEXT:    mov x16, #40224 // =0x9d20
; HINT-NEXT:    autia1716
; HINT-NEXT:    br x17
; HINT-NEXT:  .Ltmp2: // Block address taken
; HINT-NEXT:  .LBB2_1: // %bb1
; HINT-NEXT:    mov w0, #1 // =0x1
; HINT-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; HINT-NEXT:    ret
; HINT-NEXT:  .Ltmp3: // Block address taken
; HINT-NEXT:  .LBB2_2: // %bb2
; HINT-NEXT:    mov w0, #2 // =0x2
; HINT-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; HINT-NEXT:    ret
entry:
  %tmp0 = call ptr @dummy_choose(ptr blockaddress(@test_indirectbr_2, %bb1), ptr blockaddress(@test_indirectbr_2, %bb2))
  indirectbr ptr %tmp0, [label %bb1, label %bb2]

bb1:
  ret i32 1

bb2:
  ret i32 2
}

;; Check we don't interfere with jump-table BRIND lowering.
; ELF-LABEL: test_jumptable:
; ELF:        adrp x9, .LJTI3_0
; ELF-NEXT:   add x9, x9, :lo12:.LJTI3_0
; ELF-NEXT:   adr x10, .LBB3_2
; ELF-NEXT:   ldrb w11, [x9, x8]
; ELF-NEXT:   add x10, x10, x11, lsl #2
; ELF-NEXT:   br x10
;
; HINT-LABEL: test_jumptable:
; HINT:        adrp x9, .LJTI3_0
; HINT-NEXT:   add x9, x9, :lo12:.LJTI3_0
; HINT-NEXT:   adr x10, .LBB3_2
; HINT-NEXT:   ldrb w11, [x9, x8]
; HINT-NEXT:   add x10, x10, x11, lsl #2
; HINT-NEXT:   br x10
define i32 @test_jumptable(i32 %in) #0 {
  switch i32 %in, label %def [
    i32 0, label %lbl1
    i32 1, label %lbl2
  ]

def:
  ret i32 0

lbl1:
  ret i32 1

lbl2:
  ret i32 2
}

; ELF-LABEL: .globl test_indirectbr_array
; ELF-NEXT:  .p2align 4, 0x0
; ELF-NEXT:  test_indirectbr_array:
; ELF-NEXT:   .xword .Ltmp0@AUTH(ia,34947)
; ELF-NEXT:   .xword .Ltmp1@AUTH(ia,34947)
; ELF-NEXT:   .xword .Ltmp2@AUTH(ia,40224)
; ELF-NEXT:   .xword .Ltmp3@AUTH(ia,40224)
; ELF-NEXT:   .size test_indirectbr_array, 32

; HINT-LABEL: .globl test_indirectbr_array
; HINT-NEXT:  .p2align 4, 0x0
; HINT-NEXT:  test_indirectbr_array:
; HINT-NEXT:   .xword .Ltmp0@AUTH(ia,34947)
; HINT-NEXT:   .xword .Ltmp1@AUTH(ia,34947)
; HINT-NEXT:   .xword .Ltmp2@AUTH(ia,40224)
; HINT-NEXT:   .xword .Ltmp3@AUTH(ia,40224)
; HINT-NEXT:   .size test_indirectbr_array, 32

@test_indirectbr_array = constant [4 x ptr] [
  ptr blockaddress(@test_indirectbr, %bb1), ptr blockaddress(@test_indirectbr, %bb2),
  ptr blockaddress(@test_indirectbr_2, %bb1), ptr blockaddress(@test_indirectbr_2, %bb2)
]

declare ptr @dummy_choose(ptr, ptr)

attributes #0 = { "ptrauth-indirect-gotos" nounwind }
