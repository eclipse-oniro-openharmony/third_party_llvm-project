//===-- XVMSubtarget.h - Define Subtarget for the XVM -----------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file declares the XVM specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_XVM_XVMSUBTARGET_H
#define LLVM_LIB_TARGET_XVM_XVMSUBTARGET_H

#include "XVMFrameLowering.h"
#include "XVMISelLowering.h"
#include "XVMInstrInfo.h"
#include "XVMSelectionDAGInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetMachine.h"

#define GET_SUBTARGETINFO_HEADER
#include "XVMGenSubtargetInfo.inc"

namespace llvm {

class XVMSubtarget : public XVMGenSubtargetInfo {
  virtual void anchor();
  XVMInstrInfo InstrInfo;
  XVMFrameLowering FrameLowering;
  XVMTargetLowering TLInfo;
  XVMSelectionDAGInfo TSInfo;

protected:
  bool isCommon;

public:
  // This constructor initializes the data members to match that
  // of the specified triple.
  XVMSubtarget(const Triple &TT, const std::string &CPU, const std::string &FS,
               const TargetMachine &TM);

  XVMSubtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS);

  // ParseSubtargetFeatures - Parses features string setting specified
  // subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);

  const XVMInstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const XVMFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const XVMTargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
 const XVMSelectionDAGInfo *getSelectionDAGInfo() const override {
   return &TSInfo;
 }
  const XVMRegisterInfo *getRegisterInfo() const override {
    return &InstrInfo.getRegisterInfo();
  }

};
} // End llvm namespace

#endif
