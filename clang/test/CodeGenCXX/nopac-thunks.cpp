// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --version 5
// RUN: %clang_cc1 -triple aarch64-linux-gnu -fptrauth-calls -emit-llvm -std=c++11 %s -o - | FileCheck %s

namespace Test1 {
  struct __attribute__((nopac)) B1 {
    virtual void* foo1() {
      return 0;
    }
  };
  struct __attribute__((nopac)) Pad1 {
    virtual ~Pad1() {}
  };
  struct __attribute__((nopac)) Proxy1 : Pad1, B1 {
    virtual ~Proxy1() {}
  };
  struct __attribute__((nopac)) D : virtual Proxy1 {
    virtual ~D() {}
    virtual void* foo1();
  };
  void* D::foo1() {
    return (void*)this;
  }
}

// CHECK-LABEL: define dso_local noundef ptr @_ZN5Test11D4foo1Ev(
// CHECK-SAME: ptr noundef nonnull align 8 dereferenceable(8) [[THIS:%.*]]) unnamed_addr #[[ATTR0:[0-9]+]] {
// CHECK-NEXT:  [[ENTRY:.*:]]
// CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// CHECK-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// CHECK-NEXT:    ret ptr [[THIS1]]
//

// CHECK-LABEL: define linkonce_odr void @_ZN5Test11DD1Ev(
// CHECK-SAME: ptr noundef nonnull align 8 dereferenceable(8) [[THIS:%.*]]) unnamed_addr #[[ATTR0]] comdat {
// CHECK-NEXT:  [[ENTRY:.*:]]
// CHECK-NEXT:    [[THIS_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store ptr [[THIS]], ptr [[THIS_ADDR]], align 8
// CHECK-NEXT:    [[THIS1:%.*]] = load ptr, ptr [[THIS_ADDR]], align 8
// CHECK-NEXT:    call void @_ZN5Test11DD2Ev(ptr noundef nonnull align 8 dereferenceable(8) [[THIS1]], ptr noundef @_ZTTN5Test11DE) #[[ATTR3:[0-9]+]]
// CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds i8, ptr [[THIS1]], i64 8
// CHECK-NEXT:    call void @_ZN5Test16Proxy1D2Ev(ptr noundef nonnull align 8 dereferenceable(16) [[TMP0]]) #[[ATTR3]]
// CHECK-NEXT:    ret void
//