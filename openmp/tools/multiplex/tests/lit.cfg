# -*- Python -*- vim: set ft=python ts=4 sw=4 expandtab tw=79:
# Configuration file for the 'lit' test runner.

import os
import re
import subprocess
import lit.formats

# Tell pylint that we know config and lit_config exist somewhere.
if 'PYLINT_IMPORT' in os.environ:
    config = object()
    lit_config = object()

def append_dynamic_library_path(path):
    if config.operating_system == 'Windows':
        name = 'PATH'
        sep = ';'
    elif config.operating_system == 'Darwin':
        name = 'DYLD_LIBRARY_PATH'
        sep = ':'
    else:
        name = 'LD_LIBRARY_PATH'
        sep = ':'
    if name in config.environment:
        config.environment[name] = path + sep + config.environment[name]
    else:
        config.environment[name] = path

# name: The name of this test suite.
config.name = 'OMPT multiplex'

# suffixes: A list of file extensions to treat as test files.
config.suffixes = ['.c']

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(__file__)

# test_exec_root: The root object directory where output is placed
config.test_exec_root = config.test_obj_root

# test format
config.test_format = lit.formats.ShTest()

# compiler flags
config.test_flags = " -I " + config.test_source_root + "/.."\
    " -I " + config.omp_header_dir + \
    " -L " + config.omp_library_dir + \
    " -I " + config.ompt_print_callback_dir + \
    " -Wl,-rpath," + config.omp_library_dir + \
    " " + config.test_openmp_flags + \
    " " + config.test_extra_flags

# to run with icc INTEL_LICENSE_FILE must be set
if 'INTEL_LICENSE_FILE' in os.environ:
    config.environment['INTEL_LICENSE_FILE'] = os.environ['INTEL_LICENSE_FILE']

# Allow XFAIL to work
config.target_triple = [ ]
for feature in config.test_compiler_features:
    config.available_features.add(feature)

# Setup environment to find dynamic library at runtime
append_dynamic_library_path(config.omp_library_dir)
append_dynamic_library_path(config.test_obj_root+"/..")

# Rpath modifications for Darwin
if config.operating_system == 'Darwin':
    config.test_flags += " -Wl,-rpath," + config.omp_library_dir

# OHOS LOCAL
if config.operating_system == 'OHOS':
    config.test_flags += " --target=aarch64-linux-ohos"
    if os.environ.get('OPENMP_STATIC_TEST') != None and os.environ.get('OPENMP_STATIC_TEST') == "True" :
        config.test_flags += " -static-openmp "

# Find the SDK on Darwin
if config.operating_system == 'Darwin':
  cmd = subprocess.Popen(['xcrun', '--show-sdk-path'],
                         stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  out, err = cmd.communicate()
  out = out.strip()
  res = cmd.wait()
  if res == 0 and out:
    config.test_flags += " -isysroot " + out

if 'Linux' in config.operating_system:
    config.available_features.add("linux")

# substitutions
config.substitutions.append(("FileCheck", "tee %%t.out | %s" % config.test_filecheck))
config.substitutions.append(("%sort-threads", "sort --numeric-sort --stable"))

config.substitutions.append(("%libomp-compile-and-run", \
    "%libomp-compile && %libomp-run"))
config.substitutions.append(("%libomp-compile", \
    "%clang %cflags %s -o %t"))
config.substitutions.append(("%libomp-tool", \
    "%clang %cflags -shared -fPIC -g"))

# OHOS_LOCAL begin
if config.operating_system == 'OHOS':
    # specific substitutions for openmp/tools/multiplex/tests/custom_data_storage/custom_data_storage.c
    config.substitutions.append(("%send-first", "&& %target-send %T/first.tool.so %tool-path/first.tool.so"))
    config.substitutions.append(("%send-second", "&& %target-send %T/second.tool.so %tool-path/second.tool.so"))

    # specific substitutions for openmp/tools/multiplex/tests/print/print.c
    config.substitutions.append(("%send-print-first", "&& %target-send %T/print.first.tool.so %tool-path/print.first.tool.so"))
    config.substitutions.append(("%send-print-second", "&& %target-send %T/print.second.tool.so %tool-path/print.second.tool.so"))
    
    config.substitutions.append(("%tool-path", "%root-path/lib")) 

    # HDC releated
    if not (config.environment.get('HDC') != None and config.environment.get('HDC_SERVER') != None 
     and config.environment.get('HDC_TARGET_SERIAL') != None and config.environment.get('LIB_PATH_ON_TARGET') != None):
        raise ValueError("Error: One or more environment variables in HDC, HDC_SERVER, HDC_TARGET_SERIAL or LIB_PATH_ON_TARGET are not set.")
    hdc = f"{config.environment['HDC']} -s {config.environment['HDC_SERVER']} -t {config.environment['HDC_TARGET_SERIAL']}"
    cmd_set_ld_library_path = f"env LD_LIBRARY_PATH={config.environment['LIB_PATH_ON_TARGET']}:$LD_LIBRARY_PATH"
    cmd_mkdir_to_device = f"{hdc} shell mkdir -p /data/local/temp/$(dirname %t)"
    cmd_push_to_device = f"{hdc} file send %t %root-path%t"
    cmd_chmod_to_test = f"{hdc} shell chmod 755 %root-path%t"
    cmd_run_on_device = f"{hdc} shell {cmd_set_ld_library_path} %root-path%t"
    config.substitutions.append(("%libomp-env-run", f"{cmd_mkdir_to_device} && {cmd_push_to_device} && {cmd_chmod_to_test} && {hdc} shell {cmd_set_ld_library_path}"))
    config.substitutions.append(("%libomp-run", f"{cmd_mkdir_to_device} && {cmd_push_to_device} && {cmd_chmod_to_test} && {cmd_run_on_device}"))
    config.substitutions.append(("%target-send", f"{hdc} file send"))
    config.substitutions.append(("%target-recv", f"{hdc} file recv"))
    config.substitutions.append(("%root-path", "/data/local/temp")) 
    config.substitutions.append(("%platform-flag", "KMP_WARNINGS=false"))  
else:
    config.substitutions.append(("%send-first", ""))
    config.substitutions.append(("%send-second", ""))
    config.substitutions.append(("%send-print-first", ""))
    config.substitutions.append(("%send-print-second", ""))
    config.substitutions.append(("%libomp-run", "%t"))
    config.substitutions.append(("%platform-flag", ""))
    config.substitutions.append(("%tool-path", "%T"))
# OHOS_LOCAL end
config.substitutions.append(("%clang", config.test_c_compiler))
config.substitutions.append(("%openmp_flag", config.test_openmp_flags))
config.substitutions.append(("%cflags", config.test_flags))

