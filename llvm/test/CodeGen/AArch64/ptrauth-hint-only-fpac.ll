; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py

; RUN: llc < %s -mtriple aarch64-linux-gnu -mattr=+pauth                                      -verify-machineinstrs \
; RUN:    | FileCheck %s -DL=".L" --check-prefixes=ELF,ELF-NOFPAC
; RUN: llc < %s -mtriple aarch64-linux-gnu -mattr=+pauth                         -mattr=+fpac -verify-machineinstrs \
; RUN:    | FileCheck %s -DL=".L" --check-prefixes=ELF,ELF-FPAC

; FIXME: When we have support for nofpac, we should reeable this
; RUN-NOT: llc < %s -mtriple aarch64-linux-gnu -mattr=+pauth -mattr=+pauth-hint-only              -verify-machineinstrs \
; RUN-NOT:    | FileCheck %s -DL=".L" --check-prefixes=HINT,HINT-NOFPAC
; RUN: llc < %s -mtriple aarch64-linux-gnu -mattr=+pauth -mattr=+pauth-hint-only -mattr=+fpac -verify-machineinstrs \
; RUN:    | FileCheck %s -DL=".L" --check-prefixes=HINT,HINT-FPAC

target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"

define i64 @test_auth_ia(i64 %arg, i64 %arg1) {
; ELF-LABEL: test_auth_ia:
; ELF:       %bb.0:
; ELF-NEXT:    mov x17, x0
; ELF-NEXT:    autia x17, x1
; ELF-NEXT:    mov x0, x17
; ELF-NEXT:    ret

; HINT-LABEL: test_auth_ia:
; HINT:       %bb.0:
; HINT-NEXT:    mov  x17, x0
; HINT-NEXT:    mov  x16, x1
; HINT-NEXT:    autia1716
; HINT-NEXT:    mov x0, x17
; HINT-NEXT:    ret
  %tmp = call i64 @llvm.ptrauth.auth(i64 %arg, i32 0, i64 %arg1)
  ret i64 %tmp
}

define i64 @test_auth_ia_zero(i64 %arg) {
; ELF-LABEL: test_auth_ia_zero:
; ELF:       %bb.0:
; ELF-NEXT:    mov x17, x0
; ELF-NEXT:    autiza x17
; ELF-NEXT:    mov x0, x17
; ELF-NEXT:    ret

; HINT-LABEL: test_auth_ia_zero:
; HINT:       %bb.0:
; HINT-NEXT:    mov x17, x0
; HINT-NEXT:    mov x16, xzr
; HINT-NEXT:    autia1716
; HINT-NEXT:    mov x0, x17
; HINT-NEXT:    ret
  %tmp = call i64 @llvm.ptrauth.auth(i64 %arg, i32 0, i64 0)
  ret i64 %tmp
}

define i64 @test_auth_ib(i64 %arg, i64 %arg1) {
; ELF-LABEL: test_auth_ib:
; ELF:       %bb.0:
; ELF-NEXT:    mov x17, x0
; ELF-NEXT:    autib x17, x1
; ELF-NEXT:    mov x0, x17
; ELF-NEXT:    ret

; HINT-LABEL: test_auth_ib:
; HINT:       %bb.0:
; HINT-NEXT:    mov  x17, x0
; HINT-NEXT:    mov  x16, x1
; HINT-NEXT:    autib1716
; HINT-NEXT:    mov x0, x17
; HINT-NEXT:    ret
  %tmp = call i64 @llvm.ptrauth.auth(i64 %arg, i32 1, i64 %arg1)
  ret i64 %tmp
}

define i64 @test_auth_ib_zero(i64 %arg) {
; ELF-LABEL: test_auth_ib_zero:
; ELF:       %bb.0:
; ELF-NEXT:    mov x17, x0
; ELF-NEXT:    autizb x17
; ELF-NEXT:    mov x0, x17
; ELF-NEXT:    ret

; HINT-LABEL: test_auth_ib_zero:
; HINT:       %bb.0:
; HINT-NEXT:    mov x17, x0
; HINT-NEXT:    mov x16, xzr
; HINT-NEXT:    autib1716
; HINT-NEXT:    mov x0, x17
; HINT-NEXT:    ret
  %tmp = call i64 @llvm.ptrauth.auth(i64 %arg, i32 1, i64 0)
  ret i64 %tmp
}

define i64 @test_auth_da(i64 %arg, i64 %arg1) {
; ELF-LABEL: test_auth_da:
; ELF:       %bb.0:
; ELF-NEXT:    mov x17, x0
; ELF-NEXT:    autda x17, x1
; ELF-NEXT:    mov x0, x17
; ELF-NEXT:    ret

; HINT-LABEL: test_auth_da:
; HINT:       %bb.0:
; HINT-NEXT:    mov x17, x0
; HINT-NEXT:    mov x16, x1
; HINT-NEXT:    autia1716
; HINT-NEXT:    mov x0, x17
; HINT-NEXT:    ret
  %tmp = call i64 @llvm.ptrauth.auth(i64 %arg, i32 2, i64 %arg1)
  ret i64 %tmp
}

define i64 @test_auth_da_zero(i64 %arg) {
; ELF-LABEL: test_auth_da_zero:
; ELF:       %bb.0:
; ELF-NEXT:    mov x17, x0
; ELF-NEXT:    autdza x17
; ELF-NEXT:    mov x0, x17
; ELF-NEXT:    ret

; HINT-LABEL: test_auth_da_zero:
; HINT:       %bb.0:
; HINT-NEXT:    mov x17, x0
; HINT-NEXT:    mov x16, xzr
; HINT-NEXT:    autia1716
; HINT-NEXT:    mov x0, x17
; HINT-NEXT:    ret
  %tmp = call i64 @llvm.ptrauth.auth(i64 %arg, i32 2, i64 0)
  ret i64 %tmp
}

define i64 @test_auth_db(i64 %arg, i64 %arg1) {
; ELF-LABEL: test_auth_db:
; ELF:       %bb.0:
; ELF-NEXT:    mov x17, x0
; ELF-NEXT:    autdb x17, x1
; ELF-NEXT:    mov x0, x17
; ELF-NEXT:    ret

; HINT-LABEL: test_auth_db:
; HINT:       %bb.0:
; HINT-NEXT:    mov x17, x0
; HINT-NEXT:    mov x16, x1
; HINT-NEXT:    autib1716
; HINT-NEXT:    mov x0, x17
; HINT-NEXT:    ret
  %tmp = call i64 @llvm.ptrauth.auth(i64 %arg, i32 3, i64 %arg1)
  ret i64 %tmp
}

define i64 @test_auth_db_zero(i64 %arg) {
; ELF-LABEL: test_auth_db_zero:
; ELF:       %bb.0:
; ELF-NEXT:    mov x17, x0
; ELF-NEXT:    autdzb x17
; ELF-NEXT:    mov x0, x17
; ELF-NEXT:    ret

; HINT-LABEL: test_auth_db_zero:
; HINT:       %bb.0:
; HINT-NEXT:    mov x17, x0
; HINT-NEXT:    mov x16, xzr
; HINT-NEXT:    autib1716
; HINT-NEXT:    mov x0, x17
; HINT-NEXT:    ret
  %tmp = call i64 @llvm.ptrauth.auth(i64 %arg, i32 3, i64 0)
  ret i64 %tmp
}

; Note that this might seem like a no-op but is actually a valid way to enforce
; the validity of a signature.
define i64 @test_resign_ia_ia(i64 %arg, i64 %arg1, i64 %arg2) {
; ELF-NOFPAC-LABEL: test_resign_ia_ia:
; ELF-NOFPAC:       %bb.0:
; ELF-NOFPAC-NEXT:    mov x17, x0
; ELF-NOFPAC-NEXT:    autia x17, x1
; ELF-NOFPAC-NEXT:    mov x16, x17
; ELF-NOFPAC-NEXT:    xpaci x16
; ELF-NOFPAC-NEXT:    cmp x16, x17
; ELF-NOFPAC-NEXT:    b.eq [[L]]auth_success_0
; ELF-NOFPAC-NEXT:    mov x17, x16
; ELF-NOFPAC-NEXT:    b [[L]]resign_end_0
; ELF-NOFPAC-NEXT:  Lauth_success_0:
; ELF-NOFPAC-NEXT:    pacia x17, x2
; ELF-NOFPAC-NEXT:  Lresign_end_0:
; ELF-NOFPAC-NEXT:    mov x0, x17
; ELF-NOFPAC-NEXT:    ret
;
; ELF-FPAC-LABEL: test_resign_ia_ia:
; ELF-FPAC:       %bb.0:
; ELF-FPAC-NEXT:    mov x17, x0
; ELF-FPAC-NEXT:    autia x17, x1
; ELF-FPAC-NEXT:    pacia x17, x2
; ELF-FPAC-NEXT:    mov x0, x17
; ELF-FPAC-NEXT:    ret

; HINT-NOFPAC-LABEL: test_resign_ia_ia:
; HINT-NOFPAC:       %bb.0:
; HINT-NOFPAC-NEXT:    mov x17, x0
; HINT-NOFPAC-NEXT:    mov x16, x1
; HINT-NOFPAC-NEXT:    autia1716
; HINT-NOFPAC-NEXT:    mov x30, x17
; HINT-NOFPAC-NEXT:    xpaclri
; HINT-NOFPAC-NEXT:    mov x16, x30
; HINT-NOFPAC-NEXT:    cmp x16, x17
; HINT-NOFPAC-NEXT:    b.eq [[L]]auth_success_0
; HINT-NOFPAC-NEXT:    mov x17, x16
; HINT-NOFPAC-NEXT:    b [[L]]resign_end_0
; HINT-NOFPAC-NEXT:  Lauth_success_0:
; HINT-NOFPAC-NEXT:    mov x16, x2
; HINT-NOFPAC-NEXT:    pacia1716
; HINT-NOFPAC-NEXT:  Lresign_end_0:
; HINT-NOFPAC-NEXT:    mov x0, x17
; HINT-NOFPAC-NEXT:    ret
;
; HINT-FPAC-LABEL: test_resign_ia_ia:
; HINT-FPAC:       %bb.0:
; HINT-FPAC-NEXT:    mov x17, x0
; HINT-FPAC-NEXT:    mov x16, x1
; HINT-FPAC-NEXT:    autia1716
; HINT-FPAC-NEXT:    mov x16, x2
; HINT-FPAC-NEXT:    pacia1716
; HINT-FPAC-NEXT:    mov x0, x17
; HINT-FPAC-NEXT:    ret
  %tmp = call i64 @llvm.ptrauth.resign(i64 %arg, i32 0, i64 %arg1, i32 0, i64 %arg2)
  ret i64 %tmp
}

define i64 @test_resign_ib_ia(i64 %arg, i64 %arg1, i64 %arg2) {
; ELF-NOFPAC-LABEL: test_resign_ib_ia:
; ELF-NOFPAC:       %bb.0:
; ELF-NOFPAC-NEXT:    mov x17, x0
; ELF-NOFPAC-NEXT:    autib x17, x1
; ELF-NOFPAC-NEXT:    mov x16, x17
; ELF-NOFPAC-NEXT:    xpaci x16
; ELF-NOFPAC-NEXT:    cmp x16, x17
; ELF-NOFPAC-NEXT:    b.eq [[L]]auth_success_1
; ELF-NOFPAC-NEXT:    mov x17, x16
; ELF-NOFPAC-NEXT:    b [[L]]resign_end_1
; ELF-NOFPAC-NEXT:  Lauth_success_1:
; ELF-NOFPAC-NEXT:    pacia x17, x2
; ELF-NOFPAC-NEXT:  Lresign_end_1:
; ELF-NOFPAC-NEXT:    mov x0, x17
; ELF-NOFPAC-NEXT:    ret
;
; ELF-FPAC-LABEL: test_resign_ib_ia:
; ELF-FPAC:       %bb.0:
; ELF-FPAC-NEXT:    mov x17, x0
; ELF-FPAC-NEXT:    autib x17, x1
; ELF-FPAC-NEXT:    pacia x17, x2
; ELF-FPAC-NEXT:    mov x0, x17
; ELF-FPAC-NEXT:    ret
;
; HINT-NOFPAC-LABEL: test_resign_ib_ia:
; HINT-NOFPAC:       %bb.0:
; HINT-NOFPAC-NEXT:    mov x17, x0
; HINT-NOFPAC-NEXT:    mov x16, x1
; HINT-NOFPAC-NEXT:    autib1716
; HINT-NOFPAC-NEXT:    mov x30, x17
; HINT-NOFPAC-NEXT:    xpaclri
; HINT-NOFPAC-NEXT:    mov x16, x30
; HINT-NOFPAC-NEXT:    cmp x16, x17
; HINT-NOFPAC-NEXT:    b.eq [[L]]auth_success_1
; HINT-NOFPAC-NEXT:    mov x17, x16
; HINT-NOFPAC-NEXT:    b [[L]]resign_end_1
; HINT-NOFPAC-NEXT:  Lauth_success_1:
; HINT-NOFPAC-NEXT:    mov x16, x2
; HINT-NOFPAC-NEXT:    pacia1716
; HINT-NOFPAC-NEXT:  Lresign_end_1:
; HINT-NOFPAC-NEXT:    mov x0, x17
; HINT-NOFPAC-NEXT:    ret
;
; HINT-FPAC-LABEL: test_resign_ib_ia:
; HINT-FPAC:       %bb.0:
; HINT-FPAC-NEXT:    mov x17, x0
; HINT-FPAC-NEXT:    mov x16, x1
; HINT-FPAC-NEXT:    autib1716
; HINT-FPAC-NEXT:    mov x16, x2
; HINT-FPAC-NEXT:    pacia1716
; HINT-FPAC-NEXT:    mov x0, x17
; HINT-FPAC-NEXT:    ret
  %tmp = call i64 @llvm.ptrauth.resign(i64 %arg, i32 1, i64 %arg1, i32 0, i64 %arg2)
  ret i64 %tmp
}

define i64 @test_resign_da_ia(i64 %arg, i64 %arg1, i64 %arg2) {
; ELF-NOFPAC-LABEL: test_resign_da_ia:
; ELF-NOFPAC:       %bb.0:
; ELF-NOFPAC-NEXT:    mov x17, x0
; ELF-NOFPAC-NEXT:    autda x17, x1
; ELF-NOFPAC-NEXT:    mov x16, x17
; ELF-NOFPAC-NEXT:    xpacd x16
; ELF-NOFPAC-NEXT:    cmp x16, x17
; ELF-NOFPAC-NEXT:    b.eq [[L]]auth_success_2
; ELF-NOFPAC-NEXT:    mov x17, x16
; ELF-NOFPAC-NEXT:    b [[L]]resign_end_2
; ELF-NOFPAC-NEXT:  Lauth_success_2:
; ELF-NOFPAC-NEXT:    pacia x17, x2
; ELF-NOFPAC-NEXT:  Lresign_end_2:
; ELF-NOFPAC-NEXT:    mov x0, x17
; ELF-NOFPAC-NEXT:    ret
;
; ELF-FPAC-LABEL: test_resign_da_ia:
; ELF-FPAC:       %bb.0:
; ELF-FPAC-NEXT:    mov x17, x0
; ELF-FPAC-NEXT:    autda x17, x1
; ELF-FPAC-NEXT:    pacia x17, x2
; ELF-FPAC-NEXT:    mov x0, x17
; ELF-FPAC-NEXT:    ret
;
; HINT-NOFPAC-LABEL: test_resign_da_ia:
; HINT-NOFPAC:       %bb.0:
; HINT-NOFPAC-NEXT:    mov x17, x0
; HINT-NOFPAC-NEXT:    mov x16, x1
; HINT-NOFPAC-NEXT:    autia1716
; HINT-NOFPAC-NEXT:    mov x30, x17
; HINT-NOFPAC-NEXT:    xpaclri
; HINT-NOFPAC-NEXT:    mov x16, x30
; HINT-NOFPAC-NEXT:    cmp x16, x17
; HINT-NOFPAC-NEXT:    b.eq [[L]]auth_success_2
; HINT-NOFPAC-NEXT:    mov x17, x16
; HINT-NOFPAC-NEXT:    b [[L]]resign_end_2
; HINT-NOFPAC-NEXT:  Lauth_success_2:
; HINT-NOFPAC-NEXT:    mov x16, x2
; HINT-NOFPAC-NEXT:    pacia1716
; HINT-NOFPAC-NEXT:  Lresign_end_2:
; HINT-NOFPAC-NEXT:    mov x0, x17
; HINT-NOFPAC-NEXT:    ret
;
; HINT-FPAC-LABEL: test_resign_da_ia:
; HINT-FPAC:       %bb.0:
; HINT-FPAC-NEXT:    mov x17, x0
; HINT-FPAC-NEXT:    mov x16, x1
; HINT-FPAC-NEXT:    autia1716
; HINT-FPAC-NEXT:    mov x16, x2
; HINT-FPAC-NEXT:    pacia1716
; HINT-FPAC-NEXT:    mov x0, x17
; HINT-FPAC-NEXT:    ret
  %tmp = call i64 @llvm.ptrauth.resign(i64 %arg, i32 2, i64 %arg1, i32 0, i64 %arg2)
  ret i64 %tmp
}

define i64 @test_resign_db_ia(i64 %arg, i64 %arg1, i64 %arg2) {
; ELF-NOFPAC-LABEL: test_resign_db_ia:
; ELF-NOFPAC:       %bb.0:
; ELF-NOFPAC-NEXT:    mov x17, x0
; ELF-NOFPAC-NEXT:    autdb x17, x1
; ELF-NOFPAC-NEXT:    mov x16, x17
; ELF-NOFPAC-NEXT:    xpacd x16
; ELF-NOFPAC-NEXT:    cmp x16, x17
; ELF-NOFPAC-NEXT:    b.eq [[L]]auth_success_3
; ELF-NOFPAC-NEXT:    mov x17, x16
; ELF-NOFPAC-NEXT:    b [[L]]resign_end_3
; ELF-NOFPAC-NEXT:  Lauth_success_3:
; ELF-NOFPAC-NEXT:    pacia x17, x2
; ELF-NOFPAC-NEXT:  Lresign_end_3:
; ELF-NOFPAC-NEXT:    mov x0, x17
; ELF-NOFPAC-NEXT:    ret
;
; ELF-FPAC-LABEL: test_resign_db_ia:
; ELF-FPAC:       %bb.0:
; ELF-FPAC-NEXT:    mov x17, x0
; ELF-FPAC-NEXT:    autdb x17, x1
; ELF-FPAC-NEXT:    pacia x17, x2
; ELF-FPAC-NEXT:    mov x0, x17
; ELF-FPAC-NEXT:    ret
;
; HINT-NOFPAC-LABEL: test_resign_db_ia:
; HINT-NOFPAC:       %bb.0:
; HINT-NOFPAC-NEXT:    mov x17, x0
; HINT-NOFPAC-NEXT:    mov x16, x1
; HINT-NOFPAC-NEXT:    autib1716
; HINT-NOFPAC-NEXT:    mov x30, x17
; HINT-NOFPAC-NEXT:    xpaclri
; HINT-NOFPAC-NEXT:    mov x16, x30
; HINT-NOFPAC-NEXT:    cmp x16, x17
; HINT-NOFPAC-NEXT:    b.eq [[L]]auth_success_3
; HINT-NOFPAC-NEXT:    mov x17, x16
; HINT-NOFPAC-NEXT:    b [[L]]resign_end_3
; HINT-NOFPAC-NEXT:  Lauth_success_3:
; HINT-NOFPAC-NEXT:    mov x16, x2
; HINT-NOFPAC-NEXT:    pacia1716
; HINT-NOFPAC-NEXT:  Lresign_end_3:
; HINT-NOFPAC-NEXT:    mov x0, x17
; HINT-NOFPAC-NEXT:    ret
;
; HINT-FPAC-LABEL: test_resign_db_ia:
; HINT-FPAC:       %bb.0:
; HINT-FPAC-NEXT:    mov x17, x0
; HINT-FPAC-NEXT:    mov x16, x1
; HINT-FPAC-NEXT:    autib1716
; HINT-FPAC-NEXT:    mov x16, x2
; HINT-FPAC-NEXT:    pacia1716
; HINT-FPAC-NEXT:    mov x0, x17
; HINT-FPAC-NEXT:    ret
  %tmp = call i64 @llvm.ptrauth.resign(i64 %arg, i32 3, i64 %arg1, i32 0, i64 %arg2)
  ret i64 %tmp
}

define i64 @test_resign_db_ib(i64 %arg, i64 %arg1, i64 %arg2) {
; ELF-NOFPAC-LABEL: test_resign_db_ib:
; ELF-NOFPAC:       %bb.0:
; ELF-NOFPAC-NEXT:    mov x17, x0
; ELF-NOFPAC-NEXT:    autdb x17, x1
; ELF-NOFPAC-NEXT:    mov x16, x17
; ELF-NOFPAC-NEXT:    xpacd x16
; ELF-NOFPAC-NEXT:    cmp x16, x17
; ELF-NOFPAC-NEXT:    b.eq [[L]]auth_success_4
; ELF-NOFPAC-NEXT:    mov x17, x16
; ELF-NOFPAC-NEXT:    b [[L]]resign_end_4
; ELF-NOFPAC-NEXT:  Lauth_success_4:
; ELF-NOFPAC-NEXT:    pacib x17, x2
; ELF-NOFPAC-NEXT:  Lresign_end_4:
; ELF-NOFPAC-NEXT:    mov x0, x17
; ELF-NOFPAC-NEXT:    ret
;
; ELF-FPAC-LABEL: test_resign_db_ib:
; ELF-FPAC:       %bb.0:
; ELF-FPAC-NEXT:    mov x17, x0
; ELF-FPAC-NEXT:    autdb x17, x1
; ELF-FPAC-NEXT:    pacib x17, x2
; ELF-FPAC-NEXT:    mov x0, x17
; ELF-FPAC-NEXT:    ret
;
; HINT-NOFPAC-LABEL: test_resign_db_ib:
; HINT-NOFPAC:       %bb.0:
; HINT-NOFPAC-NEXT:    mov x17, x0
; HINT-NOFPAC-NEXT:    mov x16, x1
; HINT-NOFPAC-NEXT:    autib1716
; HINT-NOFPAC-NEXT:    mov x30, x17
; HINT-NOFPAC-NEXT:    xpaclri
; HINT-NOFPAC-NEXT:    mov x16, x30
; HINT-NOFPAC-NEXT:    cmp x16, x17
; HINT-NOFPAC-NEXT:    b.eq [[L]]auth_success_4
; HINT-NOFPAC-NEXT:    mov x17, x16
; HINT-NOFPAC-NEXT:    b [[L]]resign_end_4
; HINT-NOFPAC-NEXT:  Lauth_success_4:
; HINT-NOFPAC-NEXT:    mov x16, x2
; HINT-NOFPAC-NEXT:    pacib1716
; HINT-NOFPAC-NEXT:  Lresign_end_4:
; HINT-NOFPAC-NEXT:    mov x0, x17
; HINT-NOFPAC-NEXT:    ret
;
; HINT-FPAC-LABEL: test_resign_db_ib:
; HINT-FPAC:       %bb.0:
; HINT-FPAC-NEXT:    mov x17, x0
; HINT-FPAC-NEXT:    mov x16, x1
; HINT-FPAC-NEXT:    autib1716
; HINT-FPAC-NEXT:    mov x16, x2
; HINT-FPAC-NEXT:    pacib1716
; HINT-FPAC-NEXT:    mov x0, x17
; HINT-FPAC-NEXT:    ret
  %tmp = call i64 @llvm.ptrauth.resign(i64 %arg, i32 3, i64 %arg1, i32 1, i64 %arg2)
  ret i64 %tmp
}

define i64 @test_resign_db_da(i64 %arg, i64 %arg1, i64 %arg2) {
; ELF-NOFPAC-LABEL: test_resign_db_da:
; ELF-NOFPAC:       %bb.0:
; ELF-NOFPAC-NEXT:    mov x17, x0
; ELF-NOFPAC-NEXT:    autdb x17, x1
; ELF-NOFPAC-NEXT:    mov x16, x17
; ELF-NOFPAC-NEXT:    xpacd x16
; ELF-NOFPAC-NEXT:    cmp x16, x17
; ELF-NOFPAC-NEXT:    b.eq [[L]]auth_success_5
; ELF-NOFPAC-NEXT:    mov x17, x16
; ELF-NOFPAC-NEXT:    b [[L]]resign_end_5
; ELF-NOFPAC-NEXT:  Lauth_success_5:
; ELF-NOFPAC-NEXT:    pacda x17, x2
; ELF-NOFPAC-NEXT:  Lresign_end_5:
; ELF-NOFPAC-NEXT:    mov x0, x17
; ELF-NOFPAC-NEXT:    ret
;
; ELF-FPAC-LABEL: test_resign_db_da:
; ELF-FPAC:       %bb.0:
; ELF-FPAC-NEXT:    mov x17, x0
; ELF-FPAC-NEXT:    autdb x17, x1
; ELF-FPAC-NEXT:    pacda x17, x2
; ELF-FPAC-NEXT:    mov x0, x17
; ELF-FPAC-NEXT:    ret
;
; HINT-NOFPAC-LABEL: test_resign_db_da:
; HINT-NOFPAC:       %bb.0:
; HINT-NOFPAC-NEXT:    mov x17, x0
; HINT-NOFPAC-NEXT:    mov x16, x1
; HINT-NOFPAC-NEXT:    autib1716
; HINT-NOFPAC-NEXT:    mov x30, x17
; HINT-NOFPAC-NEXT:    xpaclri
; HINT-NOFPAC-NEXT:    mov x16, x30
; HINT-NOFPAC-NEXT:    cmp x16, x17
; HINT-NOFPAC-NEXT:    b.eq [[L]]auth_success_5
; HINT-NOFPAC-NEXT:    mov x17, x16
; HINT-NOFPAC-NEXT:    b [[L]]resign_end_5
; HINT-NOFPAC-NEXT:  Lauth_success_5:
; HINT-NOFPAC-NEXT:    mov x16, x2
; HINT-NOFPAC-NEXT:    pacia1716
; HINT-NOFPAC-NEXT:  Lresign_end_5:
; HINT-NOFPAC-NEXT:    mov x0, x17
; HINT-NOFPAC-NEXT:    ret
;
; HINT-FPAC-LABEL: test_resign_db_da:
; HINT-FPAC:       %bb.0:
; HINT-FPAC-NEXT:    mov x17, x0
; HINT-FPAC-NEXT:    mov x16, x1
; HINT-FPAC-NEXT:    autib1716
; HINT-FPAC-NEXT:    mov x16, x2
; HINT-FPAC-NEXT:    pacia1716
; HINT-FPAC-NEXT:    mov x0, x17
; HINT-FPAC-NEXT:    ret
  %tmp = call i64 @llvm.ptrauth.resign(i64 %arg, i32 3, i64 %arg1, i32 2, i64 %arg2)
  ret i64 %tmp
}

define i64 @test_resign_db_db(i64 %arg, i64 %arg1, i64 %arg2) {
; ELF-NOFPAC-LABEL: test_resign_db_db:
; ELF-NOFPAC:       %bb.0:
; ELF-NOFPAC-NEXT:    mov x17, x0
; ELF-NOFPAC-NEXT:    autdb x17, x1
; ELF-NOFPAC-NEXT:    mov x16, x17
; ELF-NOFPAC-NEXT:    xpacd x16
; ELF-NOFPAC-NEXT:    cmp x16, x17
; ELF-NOFPAC-NEXT:    b.eq [[L]]auth_success_6
; ELF-NOFPAC-NEXT:    mov x17, x16
; ELF-NOFPAC-NEXT:    b [[L]]resign_end_6
; ELF-NOFPAC-NEXT:  Lauth_success_6:
; ELF-NOFPAC-NEXT:    pacdb x17, x2
; ELF-NOFPAC-NEXT:  Lresign_end_6:
; ELF-NOFPAC-NEXT:    mov x0, x17
; ELF-NOFPAC-NEXT:    ret
;
; ELF-FPAC-LABEL: test_resign_db_db:
; ELF-FPAC:       %bb.0:
; ELF-FPAC-NEXT:    mov x17, x0
; ELF-FPAC-NEXT:    autdb x17, x1
; ELF-FPAC-NEXT:    pacdb x17, x2
; ELF-FPAC-NEXT:    mov x0, x17
; ELF-FPAC-NEXT:    ret
;
; HINT-NOFPAC-LABEL: test_resign_db_db:
; HINT-NOFPAC:       %bb.0:
; HINT-NOFPAC-NEXT:    mov x17, x0
; HINT-NOFPAC-NEXT:    mov x16, x1
; HINT-NOFPAC-NEXT:    autib1716
; HINT-NOFPAC-NEXT:    mov x30, x17
; HINT-NOFPAC-NEXT:    xpaclri
; HINT-NOFPAC-NEXT:    mov x16, x30
; HINT-NOFPAC-NEXT:    cmp x16, x17
; HINT-NOFPAC-NEXT:    b.eq [[L]]auth_success_6
; HINT-NOFPAC-NEXT:    mov x17, x16
; HINT-NOFPAC-NEXT:    b [[L]]resign_end_6
; HINT-NOFPAC-NEXT:  Lauth_success_6:
; HINT-NOFPAC-NEXT:    mov x16, x2
; HINT-NOFPAC-NEXT:    pacib1716
; HINT-NOFPAC-NEXT:  Lresign_end_6:
; HINT-NOFPAC-NEXT:    mov x0, x17
; HINT-NOFPAC-NEXT:    ret
;
; HINT-FPAC-LABEL: test_resign_db_db:
; HINT-FPAC:       %bb.0:
; HINT-FPAC-NEXT:    mov x17, x0
; HINT-FPAC-NEXT:    mov x16, x1
; HINT-FPAC-NEXT:    autib1716
; HINT-FPAC-NEXT:    mov x16, x2
; HINT-FPAC-NEXT:    pacib1716
; HINT-FPAC-NEXT:    mov x0, x17
; HINT-FPAC-NEXT:    ret
  %tmp = call i64 @llvm.ptrauth.resign(i64 %arg, i32 3, i64 %arg1, i32 3, i64 %arg2)
  ret i64 %tmp
}

define i64 @test_resign_iza_db(i64 %arg, i64 %arg1, i64 %arg2) {
; ELF-NOFPAC-LABEL: test_resign_iza_db:
; ELF-NOFPAC:       %bb.0:
; ELF-NOFPAC-NEXT:    mov x17, x0
; ELF-NOFPAC-NEXT:    autiza x17
; ELF-NOFPAC-NEXT:    mov x16, x17
; ELF-NOFPAC-NEXT:    xpaci x16
; ELF-NOFPAC-NEXT:    cmp x16, x17
; ELF-NOFPAC-NEXT:    b.eq [[L]]auth_success_7
; ELF-NOFPAC-NEXT:    mov x17, x16
; ELF-NOFPAC-NEXT:    b [[L]]resign_end_7
; ELF-NOFPAC-NEXT:  Lauth_success_7:
; ELF-NOFPAC-NEXT:    pacdb x17, x2
; ELF-NOFPAC-NEXT:  Lresign_end_7:
; ELF-NOFPAC-NEXT:    mov x0, x17
; ELF-NOFPAC-NEXT:    ret
;
; ELF-FPAC-LABEL: test_resign_iza_db:
; ELF-FPAC:       %bb.0:
; ELF-FPAC-NEXT:    mov x17, x0
; ELF-FPAC-NEXT:    autiza x17
; ELF-FPAC-NEXT:    pacdb x17, x2
; ELF-FPAC-NEXT:    mov x0, x17
; ELF-FPAC-NEXT:    ret
;
; HINT-NOFPAC-LABEL: test_resign_iza_db:
; HINT-NOFPAC:       %bb.0:
; HINT-NOFPAC-NEXT:    mov x17, x0
; HINT-NOFPAC-NEXT:    mov x16, xzr
; HINT-NOFPAC-NEXT:    autia1716
; HINT-NOFPAC-NEXT:    mov x30, x17
; HINT-NOFPAC-NEXT:    xpaclri
; HINT-NOFPAC-NEXT:    mov x16, x30
; HINT-NOFPAC-NEXT:    cmp x16, x17
; HINT-NOFPAC-NEXT:    b.eq [[L]]auth_success_7
; HINT-NOFPAC-NEXT:    mov x17, x16
; HINT-NOFPAC-NEXT:    b [[L]]resign_end_7
; HINT-NOFPAC-NEXT:  Lauth_success_7:
; HINT-NOFPAC-NEXT:    mov x16, x2
; HINT-NOFPAC-NEXT:    pacib1716
; HINT-NOFPAC-NEXT:  Lresign_end_7:
; HINT-NOFPAC-NEXT:    mov x0, x17
; HINT-NOFPAC-NEXT:    ret
;
; HINT-FPAC-LABEL: test_resign_iza_db:
; HINT-FPAC:       %bb.0:
; HINT-FPAC-NEXT:    mov x17, x0
; HINT-FPAC-NEXT:    mov x16, xzr
; HINT-FPAC-NEXT:    autia1716
; HINT-FPAC-NEXT:    mov x16, x2
; HINT-FPAC-NEXT:    pacib1716
; HINT-FPAC-NEXT:    mov x0, x17
; HINT-FPAC-NEXT:    ret
  %tmp = call i64 @llvm.ptrauth.resign(i64 %arg, i32 0, i64 0, i32 3, i64 %arg2)
  ret i64 %tmp
}

define i64 @test_resign_da_dzb(i64 %arg, i64 %arg1, i64 %arg2) {
; ELF-NOFPAC-LABEL: test_resign_da_dzb:
; ELF-NOFPAC:       %bb.0:
; ELF-NOFPAC-NEXT:    mov x17, x0
; ELF-NOFPAC-NEXT:    autda x17, x1
; ELF-NOFPAC-NEXT:    mov x16, x17
; ELF-NOFPAC-NEXT:    xpacd x16
; ELF-NOFPAC-NEXT:    cmp x16, x17
; ELF-NOFPAC-NEXT:    b.eq [[L]]auth_success_8
; ELF-NOFPAC-NEXT:    mov x17, x16
; ELF-NOFPAC-NEXT:    b [[L]]resign_end_8
; ELF-NOFPAC-NEXT:  Lauth_success_8:
; ELF-NOFPAC-NEXT:    pacdzb x17
; ELF-NOFPAC-NEXT:  Lresign_end_8:
; ELF-NOFPAC-NEXT:    mov x0, x17
; ELF-NOFPAC-NEXT:    ret
;
; ELF-FPAC-LABEL: test_resign_da_dzb:
; ELF-FPAC:       %bb.0:
; ELF-FPAC-NEXT:    mov x17, x0
; ELF-FPAC-NEXT:    autda x17, x1
; ELF-FPAC-NEXT:    pacdzb x17
; ELF-FPAC-NEXT:    mov x0, x17
; ELF-FPAC-NEXT:    ret
;
; HINT-NOFPAC-LABEL: test_resign_da_dzb:
; HINT-NOFPAC:       %bb.0:
; HINT-NOFPAC-NEXT:    mov x17, x0
; HINT-NOFPAC-NEXT:    mov x16, x1
; HINT-NOFPAC-NEXT:    autia1716
; HINT-NOFPAC-NEXT:    mov x30, x17
; HINT-NOFPAC-NEXT:    xpaclri
; HINT-NOFPAC-NEXT:    mov x16, x30
; HINT-NOFPAC-NEXT:    cmp x16, x17
; HINT-NOFPAC-NEXT:    b.eq [[L]]auth_success_8
; HINT-NOFPAC-NEXT:    mov x17, x16
; HINT-NOFPAC-NEXT:    b [[L]]resign_end_8
; HINT-NOFPAC-NEXT:  Lauth_success_8:
; HINT-NOFPAC-NEXT:    mov x16, xzr
; HINT-NOFPAC-NEXT:    pacib1716
; HINT-NOFPAC-NEXT:  Lresign_end_8:
; HINT-NOFPAC-NEXT:    mov x0, x17
; HINT-NOFPAC-NEXT:    ret
;
; HINT-FPAC-LABEL: test_resign_da_dzb:
; HINT-FPAC:       %bb.0:
; HINT-FPAC-NEXT:    mov x17, x0
; HINT-FPAC-NEXT:    mov x16, x1
; HINT-FPAC-NEXT:    autia1716
; HINT-FPAC-NEXT:    mov x16, xzr
; HINT-FPAC-NEXT:    pacib1716
; HINT-FPAC-NEXT:    mov x0, x17
; HINT-FPAC-NEXT:    ret
  %tmp = call i64 @llvm.ptrauth.resign(i64 %arg, i32 2, i64 %arg1, i32 3, i64 0)
  ret i64 %tmp
}

define i64 @test_auth_trap_attribute(i64 %arg, i64 %arg1) "ptrauth-auth-traps" {
; ELF-NOFPAC-LABEL: test_auth_trap_attribute:
; ELF-NOFPAC:       %bb.0:
; ELF-NOFPAC-NEXT:    mov x17, x0
; ELF-NOFPAC-NEXT:    autia x17, x1
; ELF-NOFPAC-NEXT:    mov x16, x17
; ELF-NOFPAC-NEXT:    xpaci x16
; ELF-NOFPAC-NEXT:    cmp x16, x17
; ELF-NOFPAC-NEXT:    b.eq [[L]]auth_success_9
; ELF-NOFPAC-NEXT:    brk #0xc470
; ELF-NOFPAC-NEXT:  Lauth_success_9:
; ELF-NOFPAC-NEXT:    mov x0, x17
; ELF-NOFPAC-NEXT:    ret
;
; ELF-FPAC-LABEL: test_auth_trap_attribute:
; ELF-FPAC:       %bb.0:
; ELF-FPAC-NEXT:    mov x17, x0
; ELF-FPAC-NEXT:    autia x17, x1
; ELF-FPAC-NEXT:    mov x0, x17
; ELF-FPAC-NEXT:    ret
;
; HINT-NOFPAC-LABEL: test_auth_trap_attribute:
; HINT-NOFPAC:       %bb.0:
; HINT-NOFPAC-NEXT:    mov x17, x0
; HINT-NOFPAC-NEXT:    mov x16, x1
; HINT-NOFPAC-NEXT:    autia1716
; HINT-NOFPAC-NEXT:    mov x30, x17
; HINT-NOFPAC-NEXT:    xpaclri
; HINT-NOFPAC-NEXT:    mov x16, x30
; HINT-NOFPAC-NEXT:    cmp x16, x17
; HINT-NOFPAC-NEXT:    b.eq [[L]]auth_success_9
; HINT-NOFPAC-NEXT:    brk #0xc470
; HINT-NOFPAC-NEXT:  Lauth_success_9:
; HINT-NOFPAC-NEXT:    mov x0, x17
; HINT-NOFPAC-NEXT:    ret

; HINT-FPAC-LABEL: test_auth_trap_attribute:
; HINT-FPAC:       %bb.0:
; HINT-FPAC-NEXT:    mov x17, x0
; HINT-FPAC-NEXT:    mov x16, x1
; HINT-FPAC-NEXT:    autia1716
; HINT-FPAC-NEXT:    mov x0, x17
; HINT-FPAC-NEXT:    ret
  %tmp = call i64 @llvm.ptrauth.auth(i64 %arg, i32 0, i64 %arg1)
  ret i64 %tmp
}

declare i64 @llvm.ptrauth.auth(i64, i32, i64)
declare i64 @llvm.ptrauth.resign(i64, i32, i64, i32, i64)
